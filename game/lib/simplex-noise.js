const F2=.5*(Math.sqrt(3)-1),G2=(3-Math.sqrt(3))/6,F3=1/3,G3=1/6,F4=(Math.sqrt(5)-1)/4,G4=(5-Math.sqrt(5))/20,grad3=new Float32Array([1,1,0,-1,1,0,1,-1,0,-1,-1,0,1,0,1,-1,0,1,1,0,-1,-1,0,-1,0,1,1,0,-1,1,0,1,-1,0,-1,-1]),grad4=new Float32Array([0,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,1,0,1,1,1,0,1,-1,1,0,-1,1,1,0,-1,-1,-1,0,1,1,-1,0,1,-1,-1,0,-1,1,-1,0,-1,-1,1,1,0,1,1,1,0,-1,1,-1,0,1,1,-1,0,-1,-1,1,0,1,-1,1,0,-1,-1,-1,0,1,-1,-1,0,-1,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,0]);export class SimplexNoise{constructor(a=Math.random){const b="function"==typeof a?a:alea(a);this.p=buildPermutationTable(b),this.perm=new Uint8Array(512),this.permMod12=new Uint8Array(512);for(let b=0;512>b;b++)this.perm[b]=this.p[255&b],this.permMod12[b]=this.perm[b]%12}noise2D(a,b){const c=this.permMod12,d=this.perm;let e=0,f=0,g=0;const h=(a+b)*F2,k=Math.floor(a+h),i=Math.floor(b+h),j=(k+i)*G2,l=a-(k-j),m=b-(i-j);let n,o;l>m?(n=1,o=0):(n=0,o=1);const p=l-n+G2,q=m-o+G2,r=l-1+2*G2,s=m-1+2*G2,t=255&k,u=255&i;let v=.5-l*l-m*m;if(0<=v){const a=3*c[t+d[u]];v*=v,e=v*v*(grad3[a]*l+grad3[a+1]*m)}let w=.5-p*p-q*q;if(0<=w){const a=3*c[t+n+d[u+o]];w*=w,f=w*w*(grad3[a]*p+grad3[a+1]*q)}let x=.5-r*r-s*s;if(0<=x){const a=3*c[t+1+d[u+1]];x*=x,g=x*x*(grad3[a]*r+grad3[a+1]*s)}return 70*(e+f+g)}noise3D(a,b,c){const d=this.permMod12,e=this.perm;let f,g,h,l;const m=(a+b+c)*F3,n=Math.floor(a+m),i=Math.floor(b+m),j=Math.floor(c+m),k=(n+i+j)*G3,o=a-(n-k),p=b-(i-k),q=c-(j-k);let r,s,t,u,v,w;o>=p?p>=q?(r=1,s=0,t=0,u=1,v=1,w=0):o>=q?(r=1,s=0,t=0,u=1,v=0,w=1):(r=0,s=0,t=1,u=1,v=0,w=1):p<q?(r=0,s=0,t=1,u=0,v=1,w=1):o<q?(r=0,s=1,t=0,u=0,v=1,w=1):(r=0,s=1,t=0,u=1,v=1,w=0);const x=o-r+G3,y=p-s+G3,z=q-t+G3,A=o-u+2*G3,B=p-v+2*G3,C=q-w+2*G3,D=o-1+3*G3,E=p-1+3*G3,F=q-1+3*G3,G=255&n,H=255&i,I=255&j;let J=.6-o*o-p*p-q*q;if(0>J)f=0;else{const a=3*d[G+e[H+e[I]]];J*=J,f=J*J*(grad3[a]*o+grad3[a+1]*p+grad3[a+2]*q)}let K=.6-x*x-y*y-z*z;if(0>K)g=0;else{const a=3*d[G+r+e[H+s+e[I+t]]];K*=K,g=K*K*(grad3[a]*x+grad3[a+1]*y+grad3[a+2]*z)}let L=.6-A*A-B*B-C*C;if(0>L)h=0;else{const a=3*d[G+u+e[H+v+e[I+w]]];L*=L,h=L*L*(grad3[a]*A+grad3[a+1]*B+grad3[a+2]*C)}let M=.6-D*D-E*E-F*F;if(0>M)l=0;else{const a=3*d[G+1+e[H+1+e[I+1]]];M*=M,l=M*M*(grad3[a]*D+grad3[a+1]*E+grad3[a+2]*F)}return 32*(f+g+h+l)}noise4D(a,b,c,d){const e=this.perm;let f,g,h,m,n;const o=(a+b+c+d)*F4,p=Math.floor(a+o),i=Math.floor(b+o),j=Math.floor(c+o),k=Math.floor(d+o),l=(p+i+j+k)*G4,q=a-(p-l),r=b-(i-l),s=c-(j-l),t=d-(k-l);let u=0,v=0,w=0,x=0;q>r?u++:v++,q>s?u++:w++,q>t?u++:x++,r>s?v++:w++,r>t?v++:x++,s>t?w++:x++;const y=3<=u?1:0,z=3<=v?1:0,A=3<=w?1:0,B=3<=x?1:0,C=2<=u?1:0,D=2<=v?1:0,E=2<=w?1:0,F=2<=x?1:0,G=1<=u?1:0,H=1<=v?1:0,I=1<=w?1:0,J=1<=x?1:0,K=q-y+G4,L=r-z+G4,M=s-A+G4,N=t-B+G4,O=q-C+2*G4,P=r-D+2*G4,Q=s-E+2*G4,R=t-F+2*G4,S=q-G+3*G4,T=r-H+3*G4,U=s-I+3*G4,V=t-J+3*G4,W=q-1+4*G4,X=r-1+4*G4,Y=s-1+4*G4,Z=t-1+4*G4,$=255&p,_=255&i,aa=255&j,ba=255&k;let ca=.6-q*q-r*r-s*s-t*t;if(0>ca)f=0;else{const a=4*(e[$+e[_+e[aa+e[ba]]]]%32);ca*=ca,f=ca*ca*(grad4[a]*q+grad4[a+1]*r+grad4[a+2]*s+grad4[a+3]*t)}let da=.6-K*K-L*L-M*M-N*N;if(0>da)g=0;else{const a=4*(e[$+y+e[_+z+e[aa+A+e[ba+B]]]]%32);da*=da,g=da*da*(grad4[a]*K+grad4[a+1]*L+grad4[a+2]*M+grad4[a+3]*N)}let ea=.6-O*O-P*P-Q*Q-R*R;if(0>ea)h=0;else{const a=4*(e[$+C+e[_+D+e[aa+E+e[ba+F]]]]%32);ea*=ea,h=ea*ea*(grad4[a]*O+grad4[a+1]*P+grad4[a+2]*Q+grad4[a+3]*R)}let fa=.6-S*S-T*T-U*U-V*V;if(0>fa)m=0;else{const a=4*(e[$+G+e[_+H+e[aa+I+e[ba+J]]]]%32);fa*=fa,m=fa*fa*(grad4[a]*S+grad4[a+1]*T+grad4[a+2]*U+grad4[a+3]*V)}let ga=.6-W*W-X*X-Y*Y-Z*Z;if(0>ga)n=0;else{const a=4*(e[$+1+e[_+1+e[aa+1+e[ba+1]]]]%32);ga*=ga,n=ga*ga*(grad4[a]*W+grad4[a+1]*X+grad4[a+2]*Y+grad4[a+3]*Z)}return 27*(f+g+h+m+n)}}export default SimplexNoise;export function buildPermutationTable(a){const b=new Uint8Array(256);for(let c=0;256>c;c++)b[c]=c;for(let c=0;255>c;c++){const d=c+~~(a()*(256-c)),e=b[c];b[c]=b[d],b[d]=e}return b}function alea(a){let b=0,d=0,e=0,f=1;const g=masher();return b=g(" "),d=g(" "),e=g(" "),b-=g(a),0>b&&(b+=1),d-=g(a),0>d&&(d+=1),e-=g(a),0>e&&(e+=1),function(){const a=2091639*b+23283064365386963e-26*f;return b=d,d=e,e=a-(f=0|a)}}function masher(){let a=4022871197;return function(b){b=b.toString();for(let c=0;c<b.length;c++){a+=b.charCodeAt(c);let d=.02519603282416938*a;a=d>>>0,d-=a,d*=a,a=d>>>0,d-=a,a+=4294967296*d}return 23283064365386963e-26*(a>>>0)}}
